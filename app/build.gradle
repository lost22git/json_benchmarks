plugins {
  alias(libs.plugins.jmh)
  alias(libs.plugins.jmhReport)
  alias(libs.plugins.micronaut)
}


dependencies {
  // JMH
  jmh(libs.bundles.jmh)
  // Jackson
  implementation(libs.bundles.jackson)
  // Jsoniter
  implementation(libs.jsoniter)
  runtimeOnly(libs.javassist)
  // FastJson
  implementation(libs.fastjson)
  // FastJson2
  implementation(libs.fastjson2)
  // Gson
  implementation(libs.gson)
  // Moshi
  implementation(libs.moshi)
  // Yasson
  compileOnly(libs.jsonb)
  runtimeOnly(libs.yasson)
  // Micronaut Serialization
  implementation("io.micronaut:micronaut-runtime")
  annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
  implementation("io.micronaut.serde:micronaut-serde-jackson")
  // Qson
  implementation(libs.bundles.qson)
  // Avaje json
  implementation(libs.avaje.jsonb)
  jmhAnnotationProcessor(libs.avaje.jsonb.generator)
}

// Micronaut Serialization
def versionCatalog = extensions.getByType(VersionCatalogsExtension).named("libs")
def micronautVersion = versionCatalog.findVersion("micronaut").get()
micronaut {
  version(micronautVersion.toString())
  processing {
    incremental(true)
    annotations("org.example.*")
    sourceSets(
      sourceSets.jmh  // process jmh sources
    )
  }
}

def javac_args = [
  "--add-opens",
  "java.base/java.lang=ALL-UNNAMED"
]

def jvm_args = [
  "-XX:+UnlockExperimentalVMOptions",
  "-XX:+UseZGC",
  '-Xms2048m',
  '-Xmx2048m',
  "--add-opens",
  "java.base/java.lang=ALL-UNNAMED"
]

jmh {
  profilers = ['gc', 'stack']
  resultFormat.set("JSON")
  jvmArgsAppend = jvm_args
}

jmhReport {
  jmhResultPath = project.file('build/results/jmh/results.json')
  jmhReportOutput = project.file('build/results/jmh')
}

tasks.jmh.finalizedBy tasks.jmhReport

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs += javac_args
}

tasks.withType(JavaExec).configureEach {
  jvmArgs = jvm_args
}
